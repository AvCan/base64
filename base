.model small

maxsk equ 100

.stack 100h
.data
    buffer  db 200, ?, 200 dup (?)
    buffer2 db 200, ?, 200 dup (?)
    ; buferiai naudojami duomenims perduoti 
    handle  dw ?
    handle2 dw ?
    ; failu deskriptoriai
    input  db maxsk dup (0)
    output db maxsk dup (0)   
    ; failai
    base64 db 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'  
    ; base64 koduote nuo 0 pozicijos (pvz 0 = A, 1 =B)
    kiek dw ?
    ; kiek perskaitem
    msg db "pasirinkite konvertavima", 13, 10, "$"
    msg2 db "1)is ascii i base 64", 13, 10,"$" 
    msg3 db "2)is base64 i ascii", 13, 10, "$" 
    msg4 db " nera tokio pasirinkimo",13, 10, "$" 
    ; pranesimai
    new_line db 10, 13, "$"
    pirmas db ?
    antras db ?
    trecias db ? 
    ketvirtas db ?
    checkin1 db ?
    checkin2 db ?
    sk db ?

.code
start:
    mov ax, @data
    mov ds, ax
    
;parametru skaitymas
    mov si, -1
    mov bx, 81h
    
parametersearch:
    mov ax, es:[bx]
    cmp al, ' '
    jne parameter1
    inc bx
    jmp parametersearch

parameter1:
    mov ax, es:[bx]
    cmp al, ' '
    je parameter
    inc si
    mov [input+si], al
    inc bx
    jmp parameter1
    

parameter:
    mov si, -1
parameter2:
    inc bx
    mov ax, es:[bx]
    cmp al, 0dh
        je which
    inc si
    mov [output+si], al
    jmp parameter2
;pasirenkame i ka versime
;1) ascii --> base 64
;2) base64 ---> ascii
which:
    mov ah, 09h
    mov dx, offset msg               
    int 21h
          
    mov ah, 09h
    mov dx, offset msg2
    int 21h
                                      
    mov ah, 09h
    mov dx, offset msg3
    int 21h
    
    mov ah, 08h
    int 21h
    
    mov ah, 09h
    mov dx, offset new_line
    int 21h
    
    mov ah, 02
    mov dl, al
    int 21h
    
    mov sk, 0
    mov sk, al
    cmp sk, '1'
    je openfile
    jmp base
;---------------------------------------------------------------------------

openfile:      
     mov ah, 3dh
     mov al, 2
     lea dx, input
     int 21h
     mov handle, ax
     mov si, 0
     
openfile2:
     mov ah, 3dh
     mov al, 2
     mov dx, offset output
     int 21h
     mov handle2, ax
      


     
readfile:    
     mov word ptr [ buffer ], 0
     mov byte ptr [buffer + 2], 0
     mov di, 0
   
     mov ax, 3F00h
     mov bx, handle
     mov cx, 3
     ;mov dx, offset [buffer + si]
     mov dx, offset buffer
     int 21h
     mov kiek, ax

     cmp ax, 0
     jne skipjump
     jmp closefile
skipjump:
     mov si, ax
     ;mov di, 0
     ; 1
print1:
     mov bh, 0
     mov bl, [buffer]
     shr bl, 2
     
     mov ah, base64[bx]
     mov byte ptr [buffer2 + di], ah
     inc di
     ; 2
print2:
     mov bh, 0
     mov bl, [buffer]
     and bl, 03
     shl bl, 4
     
     mov dh, 0
     mov dl, [buffer + 1]
     shr dl, 4
     
     or bl, dl
     
     mov ah, base64[bx]
     mov byte ptr [buffer2 + di], ah
     inc di
     
     cmp kiek, 1
     ja print3 
     mov ah, 02h
     mov dl, '='
     int 21h
     jmp check
     
print3:
     ; 3
     mov bh, 0
     mov bl, [buffer + 1]
     and bl, 0Fh
     shl bl, 2
     
     mov dh, 0
     mov dl, [buffer + 2]
     shr dl, 6
     
     or bl, dl
     
     mov ah, base64[bx]
     mov byte ptr [buffer2 + di], ah
     inc di
     
check:
     cmp kiek, 2
     ja print4
     mov ah, 02h
     mov dl, '='
     int 21h
     jmp pabaiga

print4:
     mov bh, 0
     mov bl, [buffer + 2]
     and bl, 3Fh
     
     mov ah, base64[bx]
     mov byte ptr [buffer2 + di], ah
     inc di

pabaiga:   
write:
     ;inc di
     mov byte ptr [buffer2 + di], '$'

     mov ah, 40h
     mov bx, handle2
     mov cx, di
     mov dx, offset buffer2
     int 21h
       
     
     jmp readfile 
closefile:
     mov ah, 3eh
     mov bx, handle
     int 21h
     

closefile2:
     mov ah, 3eh
     mov bx, handle2
     int 21h

jmp theend
;---------------------------------------------------------------------------
    
base:
    cmp sk, '2'
    je go
    
    mov ah, 09h
    mov dx, offset new_line
    int 21h
    
    mov ah, 09h
    mov dx, offset msg4
    int 21h
    
    jmp theend
    
go:
    mov checkin1, 0 
    mov checkin2, 0
   
    mov di, 0
openfile3:
   
    mov ah, 3dh
    mov al, 0
    mov dx, offset input
    int 21h
   
    mov handle, ax

openfile4:
  
     mov ah, 3dh
     mov al, 1
     mov dx, offset output
     int 21h
  
     mov handle2, ax  

readfile2:
  
     mov word ptr [ buffer ], 0
     mov word ptr [ buffer + 2], 0
  
     mov ah, 3fh
     mov bx, handle
     mov cx, 4
     mov dx, offset buffer
     int 21h
    
     mov kiek, ax
    
     cmp kiek, 0
     jne next
     jmp ending

next:
      ;1
     mov ax, 0
     mov bx, 0
     mov cx, 0
     mov dx, 0
     
     mov cl, [ buffer ]
loopp:

     mov dl, base64[bx]
     inc bl
     cmp cl, dl

jne loopp

     sub bl, 1
     mov pirmas, bl
;convert2
     mov ax, 0
     mov bx, 0
     mov cx, 0
     mov dx, 0
     
     mov cl, [ buffer + 1]   

loopp2:

     mov dl, base64[bx]
     inc bl
     
     cmp cl, dl
     jne loopp2
     
     sub bl, 1
     mov antras, bl 
;convert3:
     mov ax, 0
     mov bx, 0
     mov cx, 0
     mov dx, 0
     
     mov cl, [ buffer + 2]
     
     cmp cl, '='
     je equal
     jmp loopp3

equal:

     mov checkin1, 1
     jmp starting
         

loopp3:

     mov dl, base64[bx]
     inc bl
     
     cmp cl, dl
     jne loopp3
     
     sub bl, 1
     mov trecias, bl

;convert4:
     mov ax, 0
     mov bx, 0
     mov cx, 0
     mov dx, 0
     
     mov cl, [ buffer + 3] 
     cmp cl, '='
     
     je equal2
     jmp loopp4

equal2:

     mov checkin2, 1
     jmp starting
  

loopp4:

     mov dl, base64[bx]
     inc bl
     
     cmp cl, dl
     jne loopp4
     
     sub bl, 1
     mov ketvirtas, bl

starting:
;1

     mov bl, pirmas
     shl bl, 2
     mov cl, antras
     shl cl, 2
     shr cl, 6
     or bl, cl
     
     mov byte ptr [ buffer2 + di], bl
     inc di
     
     mov ah, 02h
     mov dl, bl
     int 21h

;2
     
     mov bx, 0
     mov cx, 0
     mov dx, 0
     mov ax, 0
     
     mov bl, antras
     shl bl, 4
     mov cl, trecias
     cmp checkin1, 1
     jne next2
     jmp ending

next2:
     
     shl cl, 2
     shr cl, 4
     or bl,cl
     
     mov byte ptr [ buffer2 + di], bl
     inc di
     
     mov ah, 02h
     mov dl, bl
     int 21h
;3
     mov bx, 0
     mov cx, 0
     mov dx, 0
     mov ax, 0  
     
     mov bl, trecias
     shl bl, 6
     mov cl, ketvirtas
     cmp checkin2, 1
     jne next3
     jmp ending

next3:

     shl cl, 2
     shr cl, 2
     or bl, cl
     
     mov byte ptr [ buffer2 + di], bl
     inc di
     
     mov ah, 02h
     mov dl, bl
     int 21h
     
     cmp kiek, 4
     jne ending
     jmp readfile2

ending:

closefile4:
     mov ah, 3eh
     mov bx, handle
     int 21h
write2: 

     mov byte ptr [ buffer2 + di], '$'
  
     mov ah, 40h
     mov bx, handle2
     mov cx, di
     mov dx, offset buffer2
     int 21h

closefile3:

     mov ah, 3eh
     mov bx, handle2
     int 21h


theend:
    mov ax, 4c00h
    int 21h
end start
   
